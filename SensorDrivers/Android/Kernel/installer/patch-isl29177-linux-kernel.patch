Index: include/linux/input/isl29177.h
===================================================================
--- include/linux/input/isl29177.h	(revision 0)
+++ include/linux/input/isl29177.h	(revision 0)
@@ -0,0 +1,76 @@
+/*
+ *	File 		: isl29177.h
+ *	Desc 		: Base sample driver header to illustrate sensor features of ISL29177 prox sensor
+ *	Ver  		: 1.0
+ * 	Copyright 	: Intersil Inc. 2014
+ * 	License 	: GPLv2
+ */
+
+#ifndef _ISL29177_H_
+#define _ISL29177_H_
+
+/* REGISTER ADDR */
+enum ISL29177_REGS {
+	DEVICE_ID_REG,			/* 0x00h */
+	CONFIG0_REG,			/* 0x01h */
+	CONFIG1_REG,			/* 0x02h */
+	INT_CONFIG_REG,			/* 0x03h */
+	PROX_INT_TL_REG,		/* 0x04h */
+	PROX_INT_TH_REG,		/* 0x05h */
+	STATUS_REG,			/* 0x06h */
+	PROX_DATA_REG,			/* 0x07h */
+	PROX_AMBIR_REG,			/* 0x08h */
+	CONFIG2_REG,			/* 0x09h */
+	TEST_MODE_2,			/* 0x0Ah */
+	TEST_MODE_3,			/* 0x0Bh */
+	TEST_MODE_4,			/* 0x0Ch */
+	TEST_MODE_5,			/* 0x0Dh */
+	FUSE_REG,			/* 0x0Eh */
+	FUSE_CONTROL,			/* 0x0Fh */
+
+};
+
+/* CONFIG0_REG */
+#define PROX_EN_MASK		(0x1 << 7)
+#define PROX_SLP_MASK		(0xF << 4)
+#define SHRT_DIS_MASK		(0x1 << 3)
+#define IRDR_DRV_MASK		(0x3 << 0)
+
+/* CONFIG1_REG */
+#define PROX_OFFSET_MASK  	(0x1F << 0)
+
+/* INT_CONFIG_REG */
+#define PROX_PRST_MASK	  	(0x3 << 4)
+#define INT_PRX_EN_MASK	  	(0x1 << 3)
+#define INT_CNV_DN_EN_MASK	(0x1 << 2)
+#define INT_SHRT_EN_MASK	(0x1 << 1)
+#define INT_WSH_EN_MASK	  	(0x1 << 0) 
+
+/* STATUS_REG */
+#define PWR_FAIL_MASK		(0x1 << 4)
+#define PROX_INT_FLAG_MASK	(0x1 << 3)
+#define CNV_DN_FLG_MASK		(0x1 << 2)
+#define SHRT_FLG_MASK		(0x1 << 1)
+#define WSH_FLG_MASK		(0x1 << 0)
+
+
+#define ISL29177_I2C_ADDR	0x44 /* 1000100b */	
+/* TIMER INTERRUPT */
+#define ISL29177_POLL_DELAY_MS	100
+#define ISL29177_GPIO_IRQ      	39 
+#define SYSFS_FAIL		-ENOMEM
+#define SYSFS_SUCCESS		0
+#define MAX_BUFF_SIZE 		128
+#define ISL29177_PD_MODE 	0x00 
+#define ISL_FULL_MASK		0xFF
+
+/* CALIBRATION PARAMETER */
+#define OFFSET_ADJUST		0x07
+#define PROX_HI_THRESHOLD	0x25
+#define PROX_LO_THRESHOLD	0x15
+
+struct isl29177_pdata {
+	unsigned int gpio_irq;
+	
+}; 
+#endif /* _ISL29177_H_ */
Index: drivers/input/misc/isl29177.c
===================================================================
--- drivers/input/misc/isl29177.c	(revision 0)
+++ drivers/input/misc/isl29177.c	(revision 0)
@@ -0,0 +1,947 @@
+/**
+ *	File 		: isl29177.c
+ *	Desc 		: Sample driver to illustrate sensor features of ISL29177 
+ *			  	  proximity sensor
+ *	Ver  		: 1.0
+ * 	Copyright 	: Intersil Inc. (2014)
+ * 	License 	: GPLv2
+ */
+
+/** 
+ * Enable this macro for interrupt handling functionality 
+ * Using hrtimer (100ms polling) for now to measure readings  
+ */
+//#define ISL29177_INTERRUPT_MODE
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/i2c.h>
+#include <linux/gpio.h>
+#include <linux/hrtimer.h>
+#include <linux/input.h>
+#include <linux/input/isl29177.h>
+#include <linux/slab.h>
+#include <linux/sysfs.h>
+#include <linux/delay.h>
+#include <linux/kobject.h>
+
+
+#define REG_ARRAY_SIZE	0x10
+#define ISL29177_CALIBRATION
+
+
+static int isl_read_field(unsigned char reg, unsigned char mask, unsigned char *val);
+static int isl_write_field(unsigned char reg, unsigned char mask, unsigned char val);
+
+static int isl29177_probe(struct i2c_client *client, const struct i2c_device_id *id);
+static int isl29177_remove(struct i2c_client *client);
+static int isl29177_suspend(struct i2c_client *client, pm_message_t mesg);
+static int isl29177_resume(struct i2c_client *client);
+
+static int setup_input_device(void);
+void report_prox_count(unsigned int IR_count);
+static enum hrtimer_restart isl29177_hrtimer_handler(struct hrtimer *timer);
+static int setup_hrtimer(void);
+static int setup_debugfs(void);
+static void isl29177_initialize(void);
+
+static ssize_t cmd_hndlr(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count);
+static ssize_t show_log(struct kobject *kobj, struct kobj_attribute *attr, char *buf);
+
+static enum hrtimer_restart isl29177_hrtimer_handler(struct hrtimer *timer);
+void report_prox_count(unsigned int IR_count);
+
+
+static int offset_adjust(void);
+
+/**
+ *  Data structure to hold driver runtime resources
+ */
+/* TODO : Add complete structure comment */
+struct isl29177_drv_data { 
+	struct isl29177_pdata *pdata;	
+	struct input_dev  *input_dev;
+	struct hrtimer *timer;
+	ktime_t prox_poll_delay;
+	struct i2c_client *client;
+	struct kobject *isl29177_kobj;
+	struct mutex mutex;
+	struct work_struct work;
+	unsigned int irq;
+	int16_t power_state;
+	unsigned char reg_cache[REG_ARRAY_SIZE];
+};
+
+/* Data structure for state machine */
+struct isl29177_sm {
+	unsigned char baseline;
+	unsigned char offset;
+	unsigned char prox;
+	unsigned char wash;
+	unsigned char high_th;
+	unsigned char low_th;
+	unsigned char obj_pos;
+};
+/**
+ * Data structure that represents register map of ISL29177
+ */
+ /* TODO : Complete the entire register map */
+struct isl29177_regmap
+{
+	/* DEVICE_ID_REG */
+	unsigned char device_id;
+	/* CONFIG0_REG */
+	unsigned char irdr_curr:3;
+	unsigned char shrt_det:1;
+	unsigned char prox_slp:3;
+	unsigned char prox_en:1;
+	/* CONFIG1_REG */
+	unsigned char off_adj:5;
+	unsigned char high_offset:1;
+	unsigned char prox_pulse:1;
+	unsigned char :1;
+	/* INT_CONFIG_REG */
+	unsigned char intr_wash_en:1;
+	unsigned char intr_shrt:1;
+	unsigned char conv_done_en:1;
+	unsigned char prox_flag:1;
+	unsigned char prox_persist:2;
+	unsigned char irdr_trim:1;
+	unsigned char :1;
+	/* Threshold Reg */
+	unsigned char lt;
+	unsigned char ht;
+	/* STATUS_REG */
+	unsigned char wash_flag:1;
+	unsigned char irdr_shrt:1;
+	unsigned char conv_done:1;
+	unsigned char prox_intr:1;
+	unsigned char pwr_fail:1;
+	unsigned char :3;
+	/* PROX_AMBIR_DATA */
+	unsigned char prox;
+	unsigned char ambir;
+
+	/* further register member can be extend if needed */
+};
+
+/**
+ * Supported I2C Devices
+ */
+static struct i2c_device_id isl_device_ids[] = {
+	{ 
+		"isl29177" ,		/* Device name */
+	  	 ISL29177_I2C_ADDR      /* Device address */
+	},
+	{ },
+};
+
+MODULE_DEVICE_TABLE(i2c, isl_device_ids);
+
+struct isl29177_drv_data rdata;
+struct isl29177_sm rdata_sm;
+
+/** @function: isl_read_field
+ *  @desc    : read function for reading a particular bit field in a particular register
+ *   	       from isl29177 sensor registers over I2C interface
+ *  @args    
+ *  reg	     : register to read from (0x00h to 0x0Fh)
+ *  mask     : specific bit or group of continuous bits to read from
+ *  val	     : out pointer to store the required value to be read
+ *
+ *  @return	 : 0 on success, -1 on failure
+ *
+ *  Example :
+ *   To read bits [6:4] from register 0x00h call fn with reg = 0x00 mask = 0x70 (01110000b)
+ *   To read the entire register pass the mas value as 0xFFh
+ */
+static int isl_read_field(unsigned char reg, unsigned char mask, unsigned char *val)
+{
+	unsigned char byte;
+	unsigned char i;
+
+	byte = i2c_smbus_read_byte_data(rdata.client, reg);
+	if(mask == ISL_FULL_MASK) {
+		*val = byte;
+	} else {
+		byte &= mask;
+
+		for(i = 0; i < 8; i++)
+			if(mask & (1 << i)) break;	
+
+		if( i > 7 ) return -1;
+
+		*val = (byte >> i);
+	}
+	return 0;
+}
+
+/** @function: isl_write_field
+ *  @desc    : write function for writing a particular bit field in a particular register
+ *   	       to isl29177 sensor registers over I2C interface
+ *  @args    
+ *  reg	     : register to write to (0x00h to 0x0Fh)
+ *  mask     : specific bit or group of continuous bits to write to
+ *  val	     : value to be written to the register bits defined by mask
+ *
+ *  @return  : 0 on success, -1 on failure
+ *
+ *  Example :
+ *   To write bits [6:4] to register 0x00h call fn with reg = 0x00 mask = 0x70 (01110000b)
+ *   To write entire register use mask = 0xFFh
+ */
+static int isl_write_field(unsigned char reg, unsigned char mask, unsigned char val)
+{
+	unsigned char byte;
+	unsigned char i = 0;
+
+	if(mask == ISL_FULL_MASK) {
+		i2c_smbus_write_byte_data(rdata.client, reg, val);
+	} else {
+		byte = i2c_smbus_read_byte_data(rdata.client, reg);
+		byte &= (~mask);
+
+		for(i = 0; i < 8; i++)
+			if(mask & (1 << i)) break;	
+
+		if(i > 7) return -1;
+
+		byte |= (val << i);
+		i2c_smbus_write_byte_data(rdata.client, reg, byte);
+	}
+	return 0;
+}
+
+
+#ifdef ISL29177_CALIBRATION
+/** @function: offset_adjust
+ *  @desc    :	The proximity offset adjustment function compensates for the
+ *		IR light reflected off the inside of the protective glass
+ *  		cover and back to the ISL29177 sensor. This offset adjustment
+ *  		allows the sensor to compensate for these internal reflections
+ *  		and preserve the dynamic range of proximity measurement.
+ *
+ *  @args    :
+ *  void
+ *
+ *  @return  : 0 on success, -1 on failure
+ */
+static int offset_adjust()
+{
+	unsigned char prox, baseline,i;
+	static unsigned char offset = 0;
+	
+	for(i=0; i<5; i++)	
+		isl_read_field(PROX_DATA_REG, ISL_FULL_MASK, &prox);
+	
+	baseline = prox;
+	while(baseline > 0) {
+		isl_write_field(CONFIG1_REG, PROX_OFFSET_MASK, offset++);
+		msleep(2);
+		isl_read_field(PROX_DATA_REG, ISL_FULL_MASK, &prox);
+		baseline = prox;
+	}
+	printk(KERN_INFO"offset callibrated\n");
+	return 0;
+}
+#endif
+
+/** @function: sensor_irq_thread
+ *  @desc    : Sensor thread that handles interrupt operations scheduled by interrupt handler
+ *
+ *  @args
+ *  work     : Holds data about the work queue that holds this thread
+ *
+ *  @return  : void
+ */
+static void sensor_irq_thread(struct work_struct *work)
+{
+	unsigned char sts;
+
+	/* Clear the interrupt */
+	isl_read_field(STATUS_REG, ISL_FULL_MASK, &sts);
+	isl_read_field(PROX_DATA_REG, ISL_FULL_MASK, &rdata_sm.prox);
+	isl_read_field(PROX_AMBIR_REG, ISL_FULL_MASK, &rdata_sm.wash);
+	isl_read_field(PROX_INT_TH_REG, ISL_FULL_MASK, &rdata_sm.high_th);
+	isl_read_field(PROX_INT_TL_REG, ISL_FULL_MASK, &rdata_sm.low_th);
+
+	/* detect for device saturation */	
+	if(rdata_sm.wash > 117)
+		rdata_sm.prox = 0;
+		
+	/* Detect object position */
+	if(rdata_sm.prox > rdata_sm.high_th)
+		rdata_sm.obj_pos = 1;
+	else if(rdata_sm.prox < rdata_sm.low_th)
+		rdata_sm.obj_pos = 0;
+		
+	/* Report prox count to Userspace */
+	report_prox_count(rdata_sm.prox);
+
+}
+
+
+#ifdef ISL29177_INTERRUPT_MODE
+/** @function: isl29177_irq_handler
+ *  @desc    : Sensor interrupt handler that handles interrupt events and schedules the work queue
+ *
+ *  @args     
+ *  irq	     : irq number allocated for device
+ *  dev_id   : handle for interrupt
+ *  work     : Holds data about the work queue that holds this thread
+ *
+ *  @return  : void
+ */
+
+static irqreturn_t isl29177_irq_handler(int irq, void *dev_id)
+{
+
+	/* Schedule a thread that will handle interrupt and clear the interrupt flag*/
+	schedule_work(&rdata.work);
+	return IRQ_HANDLED;
+
+}
+#endif /* ISL29177_INTERRUPT_MODE */ 
+
+/** @function: refresh_reg_cache
+ *  @desc    : Sensor interrupt handler that handles interrupt events and schedules the work queue
+ *
+ *  @args     
+ *  void 
+ *  return   :Integer 0 on success -EIO on failure */
+static int refresh_reg_cache(void)
+{
+	unsigned char i;
+	for(i = 0; i < 0x10; i++){
+		if(isl_read_field(i, ISL_FULL_MASK, &rdata.reg_cache[i] )) return -EIO;
+	}
+	return 0;
+}
+
+/** @function: enable_show
+ *  @desc    : Function that enables or disables the sensor hrtimer operation
+ *
+ *  @args    : struct kobject* struct kobj_attribute*, char*
+ *
+ *  @return  : size of buf length on success, error on failure
+ */
+static ssize_t enable_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n",rdata.power_state);
+}
+
+/** @function: enable_store
+ *  @desc    : Function that enables or disables the sensor hrtimer operation
+ *
+ *  @args    : struct kobject* struct kobj_attribute*, char* and count
+ *
+ *  @reture  : count on success, -1 on failure
+ */
+
+static ssize_t enable_store(struct kobject *kobj, struct kobj_attribute *attr,
+                        const char *buf, size_t count)
+{
+	int reg;
+
+	reg = simple_strtoul(buf, NULL, 10);
+	mutex_lock(&rdata.mutex);
+	if(reg == 1 ){
+		isl_write_field(CONFIG0_REG, PROX_EN_MASK, 1);
+		rdata.power_state = 1;
+		hrtimer_start(rdata.timer, rdata.prox_poll_delay, HRTIMER_MODE_REL);
+	}else if(reg == 0 && rdata.power_state){
+		isl_write_field(CONFIG0_REG, PROX_EN_MASK, 0);
+		rdata.power_state = 0;
+		hrtimer_cancel(rdata.timer);
+		cancel_work_sync(&rdata.work);
+	}
+	
+	mutex_unlock(&rdata.mutex);
+	return strlen(buf);	
+}
+
+/** @function: enable_show
+ *  @desc    : Function that enables or disables the sensor hrtimer operation
+ *
+ *  @args    : struct kobject* struct kobj_attribute*, char*
+ *
+ *  @return  : size of buf length on success, error on failure
+ */
+
+static ssize_t reg_dump_show(struct kobject *kobj, struct kobj_attribute *attr,
+                        char *buf)
+{
+	int i = 0;
+	
+	refresh_reg_cache();
+	sprintf(buf," [REG]   : [VAL]\n");
+	sprintf(buf,"%s ______________\n", buf);
+	for (i = 0; i < REG_ARRAY_SIZE; i++)
+		sprintf(buf, "%s [0x%02x]  : 0x%02x\n",buf,i, rdata.reg_cache[i]);
+	return strlen(buf);
+
+}
+
+/** @function: reg_write
+ *  @desc    : Function for writing the register byte
+ *
+ *  @args    : struct kobject* struct kobj_attribute*, char*
+ *
+ *  @return  : size of buf length on success, error on failure
+ */
+static ssize_t reg_write(struct kobject *kobj, struct kobj_attribute *attr,
+                        const char *buf, size_t count)
+{
+	unsigned int reg, val;
+	sscanf(buf, "%x %x",&reg, &val);
+	if(reg > 0x0f || reg < 0 || val > 0xff || val < 0)
+		return -EINVAL;
+	mutex_lock(&rdata.mutex);
+	isl_write_field(reg, ISL_FULL_MASK, val);
+	mutex_unlock(&rdata.mutex);
+	return strlen(buf);
+}
+
+
+/** @function: setup_input_device
+ *  @desc    : setup the input device subsystem and report the input data to user space
+ *  @args    : void
+ *  @returns : 0 on success and error -1 on failure
+ */
+static int setup_input_device(void)
+{
+
+	rdata.input_dev = input_allocate_device();
+
+	if(!rdata.input_dev) {
+		pr_err("Failed to allocate input device");
+		return -1;
+	}
+
+	rdata.input_dev->name = "isl29177";
+	input_set_drvdata(rdata.input_dev,&rdata);
+
+	/* Set event data type */
+	input_set_capability(rdata.input_dev, EV_ABS, ABS_DISTANCE);
+	__set_bit(EV_ABS, rdata.input_dev->evbit);
+	input_set_abs_params(rdata.input_dev, ABS_DISTANCE, 0, 1, 0, 0);
+
+	if(input_register_device(rdata.input_dev)) {
+		pr_err("Failed to register input device");
+		return -1;	
+	}
+
+	return 0;
+}
+
+
+/** @function	: report_prox_count
+ *  @desc    	: Function to report proximity count to User space in the OS
+ *
+ *  @args
+ *  prox_count 	: proximity count (0 - 255)
+ *
+ *  @return   	: void
+ */
+void report_prox_count(unsigned int prox_count)
+{
+	input_report_abs(rdata.input_dev, ABS_DISTANCE, prox_count);
+	input_sync(rdata.input_dev);
+}
+
+/** @function: isl29177_hrtimer_handler
+ *  @desc    : high resolution timer event handler for kernel objects
+ *  @args      
+ *  timer    : structure pointer to hrtimer
+ *  @returns : HRTIMER_RESTART on success or HRTIMER_NORESTART on failure
+ */
+static enum hrtimer_restart isl29177_hrtimer_handler(struct hrtimer *timer)
+{
+	
+	schedule_work(&rdata.work);
+	hrtimer_forward_now(rdata.timer, rdata.prox_poll_delay);	
+	return HRTIMER_RESTART;
+}
+
+/** @function: setup_hrtimer
+ *  @desc    : high resolution timer setup and initialization for kernel
+ *  @args      
+ *  void    
+ *  @returns : 0 on success and error -1 on failure
+ */
+static int setup_hrtimer(void)
+{
+	rdata.timer = kzalloc(sizeof(struct hrtimer), GFP_KERNEL);
+	if(rdata.timer == NULL)
+		return -1;
+
+	hrtimer_init(rdata.timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+	rdata.prox_poll_delay = ns_to_ktime(400 * NSEC_PER_MSEC);
+	rdata.timer->function = isl29177_hrtimer_handler;
+	hrtimer_start(rdata.timer, rdata.prox_poll_delay, HRTIMER_MODE_REL);	
+	pr_err("%s:Successfully setup the high resolution timer",__func__);
+
+	return 0;
+}
+
+/** @function: isl29177_initialize
+ *  @desc    : sensor device initialization function for writing a particular 
+ *             bit field in a particular register over I2C interface
+ *  @args    : void
+ */ 
+static void isl29177_initialize(void)
+{
+
+	/* Enable test mode */
+ 	isl_write_field(CONFIG2_REG, ISL_FULL_MASK, 0x89); 			
+	msleep(10);
+
+	/* Set high offset */
+	isl_write_field(CONFIG1_REG, ISL_FULL_MASK, 0x20);
+
+	/* set persistence */
+	isl_write_field(INT_CONFIG_REG, PROX_PRST_MASK, 0x2);
+
+	/* enable interrupt & set HI and LOW Thresholds */
+	isl_write_field(PROX_INT_TL_REG, ISL_FULL_MASK, PROX_LO_THRESHOLD);
+	isl_write_field(PROX_INT_TH_REG, ISL_FULL_MASK, PROX_HI_THRESHOLD); 
+
+#ifdef ISL29177_INTERRUPT_MODE
+	isl_write_field(INT_CONFIG_REG, INT_PRX_EN_MASK, 0x1);
+#endif
+
+	/* disable residue reading */
+	isl_write_field(TEST_MODE_4, ISL_FULL_MASK, 0);
+
+	/* Enable OTP */
+	isl_write_field(FUSE_CONTROL, ISL_FULL_MASK, 0x40);
+
+	/* enable prox sensing */
+	isl_write_field(CONFIG0_REG, ISL_FULL_MASK, 0x80);
+
+	msleep(10);
+#ifdef ISL29177_CALIBRATION
+	/* adjust offset */
+	offset_adjust();
+#else
+	/* Use calibrated value */
+	isl_write_field(CONFIG1_REG, PROX_OFFSET_MASK, OFFSET_ADJUST);
+#endif
+
+}
+
+/** @function: interpret_value
+ *  @desc    : function to interpret the binary values to decimal value
+ *  @args      
+ *  regbase  : register structure for sensor registers
+ *  @returns : none
+ */
+void interpret_value(const struct isl29177_regmap *regbase, unsigned int *arr)
+{
+
+	switch(regbase->prox_slp){
+		case 0:	arr[0] = 400; break;
+		case 1:	arr[0] = 200; break;
+		case 2:	arr[0] = 100; break;
+		case 3:	arr[0] = 50; break;
+		case 4:	case 5:	case 6:
+		case 7:	arr[0] = 25; break;
+	}
+
+	switch(regbase->irdr_curr){
+		case 0:	arr[1] = 36; break;
+		case 1:	arr[1] = 71; break;
+		case 2:	arr[1] = 107; break;
+		case 3:	arr[1] = 125; break;
+		case 4:	arr[1] = 143; break;
+		case 5:	arr[1] = 150; break;
+		case 6:	arr[1] = 175; break;
+		case 7:	arr[1] = 200; break;
+	}
+
+	switch(regbase->prox_persist){
+		case 0:	arr[2] = 1; break; 
+		case 1:	arr[2] = 2; break; 
+		case 2:	arr[2] = 4; break; 
+		case 3:	arr[2] = 8; break; 
+	}
+}
+
+/*
+ * @function : show_log 
+ *  @desc    : Debugfs support for driver calibration
+ *  @args     
+ *  kobj     : kobject structure
+ *  attr     : attribute structure pointer
+ *  buf      : user data buffer 
+ *  @returns : Returns strlen of buf on success and -1 on failure
+ */
+static ssize_t show_log(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	
+	struct isl29177_regmap *regbase = (struct isl29177_regmap *)rdata.reg_cache;
+	unsigned int arr[3] = {0};
+
+	mutex_lock(&rdata.mutex);
+	if(refresh_reg_cache() < 0) goto fail;
+	interpret_value(regbase, arr);
+
+	sprintf(buf, "CONFIGURATION\n");
+	sprintf(buf, "%s---------------\n", buf);
+	sprintf(buf, "%s%-22s  %-22s  %-22s\n", buf, "CONFIG0", "CONFIG1", "INTR_CONFIG");
+	sprintf(buf, "%s%-12s: %5d%-3s  %-12s: %5d%-3s  %-12s: %5d%-3s\n", buf,
+		       "prox_en", regbase->prox_en, "", "prox_pulse", regbase->prox_pulse, "", "irdr_trim", regbase->irdr_trim, "" );
+
+	sprintf(buf, "%s%-12s: %5d%-3s  %-12s: %5d%-3s  %-12s: %5d%-3s\n", buf,
+		       "prox_slp", arr[0], "ms", "high_offset", regbase->high_offset, "","prox_persist", arr[2], "");
+	sprintf(buf, "%s%-12s: %5d%-3s  %-12s: %5d%-3s  %-12s: %5d%-3s\n", buf,
+		       "shrt_det", regbase->shrt_det, "", "off_adj", regbase->off_adj, "","prox_flag", regbase->prox_flag, "");
+	sprintf(buf, "%s%-12s: %5d%-3s  %-22s  %-12s: %5d%-3s\n", buf,
+		       "irdr_curr", arr[1], "mA", "", "conv_done_en", regbase->conv_done_en, "");
+	sprintf(buf, "%s%-47s %-11s : %5d%-3s\n", buf, "", "intr_shrt", regbase->intr_shrt,"");
+	sprintf(buf, "%s%-47s %-11s: %5d%-3s\n", buf, "", "intr_wash_en", regbase->intr_wash_en,"");
+
+	sprintf(buf, "%sTHRESHOLD\n", buf);
+	sprintf(buf, "%s-------------\n", buf);
+	sprintf(buf, "%s%-12s: %5d%-3s  %-12s: %5d%-3s\n\n", buf,"lt", regbase->lt, "", "ht", regbase->ht, "");
+	
+	sprintf(buf, "%sDATA\n", buf);
+	sprintf(buf, "%s-------------\n", buf);
+	sprintf(buf, "%s%-12s: %5d%-3s  %-12s: %5d%-3s\n\n", buf,
+		       "prox", regbase->prox, "", "ambir", regbase->ambir, "");
+
+	sprintf(buf, "%sOBJECT POSITION\n", buf);
+	sprintf(buf, "%s---------------\n", buf);
+	sprintf(buf, "%s%s\n\n", buf, rdata_sm.obj_pos ? "NEAR":"FAR");
+	
+	sprintf(buf, "%sSTATUS\n", buf);
+	sprintf(buf, "%s-------------\n", buf);
+	sprintf(buf, "%s%-12s: %5d%-3s  %-12s: %5d%-3s  %-12s: %5d%-3s  \n%-12s: %5d%-3s  %-12s: %5d%-3s\n\n", buf,
+		       "pwr_fail", regbase->pwr_fail, "", "prox_intr", regbase->prox_intr, "", "conv_done", regbase->conv_done, 
+			"", "irdr_shrt", regbase->irdr_shrt, "", "wash_flag", regbase->wash_flag, "" );
+
+	mutex_unlock(&rdata.mutex);
+	return strlen(buf);
+fail:
+	mutex_unlock(&rdata.mutex);
+	return -1;	
+}
+
+/*
+ * @function : cmd_hndlr
+ *  @desc    : Debugfs support for driver calibration
+ *  @args     
+ *  kobj     : kobject structure
+ *  attr     : attribute structure pointer
+ *  buf      : user data buffer 
+ *  count    : number of count of buffer
+ *  @returns : Returns strlen of buf on success and -1 on failure
+ */
+
+static ssize_t cmd_hndlr(struct kobject *kobj, struct kobj_attribute *attr, 
+			const char *buf, size_t count)
+{
+	unsigned char cmd_type[MAX_BUFF_SIZE];
+	uint32_t val;
+
+	mutex_lock(&rdata.mutex);	
+	sscanf(buf, "%s %d",cmd_type, &val);
+	if(!strcmp(cmd_type, "prox_persist") && (val >= 0 && val < 4))
+                isl_write_field(INT_CONFIG_REG,0x30 , val);
+	
+        else if(!strcmp(cmd_type, "irdr_curr")  && (val >= 0 && val < 8)) 
+                isl_write_field(CONFIG0_REG, 0x07, val);
+	
+	else if(!strcmp(cmd_type, "prox_slp") && (val >= 0 && val < 8))
+                isl_write_field(CONFIG0_REG, 0x70, val);
+	
+	else if(!strcmp(cmd_type, "lt") && (val >= 0 && val < 256))
+                isl_write_field(PROX_INT_TL_REG, 0xff, val);
+	
+        else if(!strcmp(cmd_type, "ht") && (val >= 0 && val < 256))
+                isl_write_field(PROX_INT_TH_REG, 0xff, val);
+	
+	else {
+		pr_err(KERN_ERR "%s:failed to write\n",__func__);
+		mutex_unlock(&rdata.mutex);
+		return -EINVAL;
+	}
+	mutex_unlock(&rdata.mutex);
+	return strlen(buf);
+
+}
+
+/*
+ *  /sys/kernel/isl29177/debug - Path for the debug interface for drivers
+ *  show_log : Used to display driver log for debugging
+ *  cmd_hndlr : Used to process debug commands from userspace 
+ */ 
+static struct kobj_attribute debug_attribute =
+__ATTR(debug, 0666, show_log, cmd_hndlr);  
+
+/* sysfs object attribute for reg_mapping */
+static struct kobj_attribute reg_map_attribute =
+__ATTR(reg_map, 0666, reg_dump_show, reg_write);  
+
+/* sysfs object for enabling and disabling the sensor */
+static struct kobj_attribute enable_attribute =
+__ATTR(enable, 0666, enable_show, enable_store);  
+static struct attribute *isl29177_attrs[] = { &debug_attribute.attr ,
+			&reg_map_attribute.attr,
+			&enable_attribute.attr,
+			NULL};
+
+static struct attribute_group isl29177_attr_grp = { .attrs = isl29177_attrs, };
+
+/** @function: setup_debugfs
+ *  @desc    : setup the separate kernel directory for isl29177 driver
+ *  @args    : void
+ *  @returns : 0 on success and error number on failure
+ */
+static int setup_debugfs(void)
+{
+
+	rdata.isl29177_kobj = kobject_create_and_add("isl29177", kernel_kobj);
+
+	if(!rdata.isl29177_kobj) 
+		return SYSFS_FAIL;
+	
+	if(sysfs_create_group(rdata.isl29177_kobj, &isl29177_attr_grp)) 
+		return SYSFS_FAIL;
+		
+	return SYSFS_SUCCESS;
+}
+
+/*
+ * @function : isl29177_probe
+ *  @desc    : Device detection is successful, allocate required resources for managing the sensor
+ *  @args     
+ *  kobj     
+ *  client   : Structure to i2c client representing the device
+ *  id       : device id of the sensor id
+ *  @returns : Returns strlen of buf on success and -1 on failure
+ */
+static int isl29177_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	struct isl29177_pdata *pdata = client->dev.platform_data; 
+	unsigned char val = 0;
+
+	if(!client || !pdata)
+		return -ENODEV;
+
+	rdata.client = client;
+	rdata.pdata = pdata;
+
+	/* Verify device id - Device ID Reg 00h */		
+	if(isl_read_field(DEVICE_ID_REG, 0xF0, &val))
+		goto end;
+	if( val != 0x6 ) {
+		pr_err("Invalid device id"); 	
+		goto end;  	
+	}
+
+#ifdef ISL29177_INTERRUPT_MODE
+	if(!gpio_is_valid(pdata->gpio_irq)) {
+		pr_err("Invalid gpio number");
+		goto end;
+	} 
+
+	if(gpio_request(pdata->gpio_irq, "isl29177-irq")) {
+		pr_err("Failed to request gpio %d", pdata->gpio_irq);	
+		goto end;	
+	}   	
+	if(gpio_direction_input(pdata->gpio_irq)) {
+		pr_err("Failed to set direction for gpio %d", pdata->gpio_irq);
+		goto fail;
+	} 
+#endif
+	mutex_init(&rdata.mutex);
+        INIT_WORK(&rdata.work, sensor_irq_thread);
+#ifdef ISL29177_INTERRUPT_MODE
+	if(request_irq((rdata.irq=gpio_to_irq(pdata->gpio_irq)), /*(irq_handler_t)*/isl29177_irq_handler,
+							 IRQF_TRIGGER_FALLING, "isl29177",&rdata)) {
+		pr_err("Failed to request irq for gpio %d", pdata->gpio_irq);
+		goto gpio_fail;
+	}
+#endif
+	/* Setup the debug interface for driver */
+	if(setup_debugfs()){
+		pr_err("%s:setup debugfs failed\n",__func__);	
+		goto sysfs_err;
+	}
+
+	/* Setup the input device infrastructure for user input subsystem */
+	if(setup_input_device()) 
+		goto err_input_register_device;
+	
+	/* High resolution timer setup for user data polling */
+	if(setup_hrtimer()) 
+		goto err_irq_fail;
+	
+	/* Initialize the sensor device */
+	isl29177_initialize();
+	pr_err("%s:Sensor probe successful\n",__func__);
+	return 0;
+
+sysfs_err:
+	sysfs_remove_group(rdata.isl29177_kobj,&isl29177_attr_grp);
+	hrtimer_cancel(rdata.timer);
+err_input_register_device:
+	input_unregister_device(rdata.input_dev);
+	cancel_delayed_work((struct delayed_work*)&rdata.work);
+err_irq_fail:
+	free_irq(rdata.irq, NULL);
+#ifdef ISL29177_INTERRUPT_MODE
+gpio_fail:
+	mutex_destroy(&rdata.mutex);
+fail:
+	gpio_free(pdata->gpio_irq);
+#endif
+end:
+	return -1;
+}
+
+/** @function: isl29177_remove
+ *  @desc    : Driver callback that frees all resources that are
+ *  @args    : structure to i2c_client
+ *  @returns : returns 0 on success
+ */
+static int isl29177_remove(struct i2c_client *client)
+{
+	hrtimer_cancel(rdata.timer);
+	cancel_delayed_work((struct delayed_work*)&rdata.work);
+	sysfs_remove_group(rdata.isl29177_kobj,&isl29177_attr_grp);
+	input_unregister_device(rdata.input_dev);
+	free_irq(gpio_to_irq(rdata.pdata->gpio_irq),NULL);
+	gpio_free(rdata.pdata->gpio_irq);		
+	input_unregister_device(rdata.input_dev);
+	mutex_destroy(&rdata.mutex);
+
+	return 0;
+}
+
+/** @function: isl29177_get_mode
+ *  @desc    : Callback function that reads the current proximity en/dis status
+ *  @args    
+ *  @returns : returns mode [0/1] on success
+ */
+static int isl29177_get_mode(void)
+{
+	unsigned char mode;
+	isl_read_field(CONFIG0_REG, PROX_EN_MASK, &mode);
+	return mode;
+}
+
+/** @function: isl29177_set_power_state
+ *  @desc    : Set the device power state depending upon the prox status 
+ *  @args    
+ *  reg      : register address 
+ *  mask     : MASK bits
+ *  mode     : enable/disable bit 
+ *  @returns : returns 0 on success and error -1 on failure
+ */
+static int isl29177_set_power_state(unsigned char reg, unsigned char mask, unsigned char mode)
+{
+	
+	if(!rdata.power_state){ 
+		hrtimer_cancel(rdata.timer);
+	        cancel_work_sync(&rdata.work);
+		/* Keep a copy of all the sensor register data */
+		refresh_reg_cache();
+		return isl_write_field(reg, mask, mode);
+	}	
+	return 0;
+}
+
+/** @function	: isl29177_suspend
+ *  @desc    	: Function that handles suspend event of the OS
+ *
+ *  @args
+ *  i2c_client	: Structure representing the I2C device
+ *  mesg	: power management event message
+ *
+ *  @return	: 0 on success and -1 on error
+ */
+#ifdef CONFIG_PM
+static int isl29177_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+	/*
+	 * disable power only if proximity is disabled. If proximity
+         * is enabled, leave power on because proximity is allowed
+         * to wake up device.
+	 */
+	printk(KERN_INFO "%s: Sensor suspended\n",__func__);
+	rdata.power_state = isl29177_get_mode();		
+	return isl29177_set_power_state(CONFIG0_REG, ISL_FULL_MASK, ISL29177_PD_MODE);
+
+}
+
+/** @function: isl29177_set_mode
+ *  @desc    : Callback function that writes the proximity en/dis status
+ *  @args    
+ *  @returns : returns mode [0/1] on success and -1 on failure
+ */
+static int isl29177_set_mode(int16_t power_state)
+{
+
+	/* push -1 to input subsystem to enable real value to go through next */
+	input_report_abs(rdata.input_dev, ABS_MISC, -1);
+	hrtimer_start(rdata.timer, rdata.prox_poll_delay, HRTIMER_MODE_REL);	
+	return power_state?isl_write_field(CONFIG0_REG, PROX_EN_MASK, power_state):0;
+
+}
+
+/** @function	: isl29177_resume
+ *  @desc    	: Function that handles resume event of the OS
+ *
+ *  @args	: struct i2c_client *client
+ *  i2c_client	: Structure representing the I2C device
+ *
+ *  @return	: 0 on success and error -1 on failure 
+ */
+static int isl29177_resume(struct i2c_client *client)
+{
+	
+	if(!rdata.power_state){	
+		refresh_reg_cache();
+	}
+
+	printk(KERN_ERR "%s: Sensor resumed\n",__func__);
+	return isl29177_set_mode(rdata.power_state);
+}
+#endif
+
+/*
+ *  I2C Driver structure representing the driver operation / callbacks
+ */ 
+static struct i2c_driver isl29177_driver = {
+	.driver   = { .name = "isl29177"},	
+	.id_table = isl_device_ids,
+	.probe    = isl29177_probe, 
+	.remove   = isl29177_remove,
+	.suspend  = isl29177_suspend,
+	.resume   = isl29177_resume,
+};
+
+static int __init isl29177_init(void)
+{
+	return i2c_add_driver(&isl29177_driver);
+}
+
+
+static void __exit isl29177_exit(void)
+{
+
+	i2c_del_driver(&isl29177_driver);	
+}
+
+module_init(isl29177_init);
+module_exit(isl29177_exit);
+MODULE_DESCRIPTION("ISL29177 Sensor device driver");
+MODULE_LICENSE("GPLv2");
+MODULE_AUTHOR("VVDN Technologies Pvt Ltd.");
+MODULE_VERSION("1.0");
+
Index: drivers/input/misc/Makefile
===================================================================
--- drivers/input/misc/Makefile	(revision 2)
+++ drivers/input/misc/Makefile	(working copy)
@@ -54,3 +54,4 @@
 obj-$(CONFIG_INPUT_XEN_KBDDEV_FRONTEND)	+= xen-kbdfront.o
 obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_INPUT_ISL29125)		+= isl29125.o
+obj-$(CONFIG_INPUT_ISL29177)		+= isl29177.o
Index: drivers/input/misc/Kconfig
===================================================================
--- drivers/input/misc/Kconfig	(revision 2)
+++ drivers/input/misc/Kconfig	(working copy)
@@ -566,5 +566,10 @@
 	help
 	This is ISL29125 I2C sensor Driver for intersil's RGB sensor.
 	
-	
+config  INPUT_ISL29177
+        bool "isl29177 sensor driver for pandaboard"
+        default y
+        depends on I2C=y
+        help
+        Device driver for intersil's isl29177 proximity sensor.
 endif
Index: arch/arm/mach-omap2/board-omap4panda.c
===================================================================
--- arch/arm/mach-omap2/board-omap4panda.c	(revision 2)
+++ arch/arm/mach-omap2/board-omap4panda.c	(working copy)
@@ -32,7 +32,7 @@
 #include <linux/if_ether.h>
 #include <linux/ti_wilink_st.h>
 #include <linux/omapfb.h>
-#include <linux/isl29125.h>
+
 #include <mach/hardware.h>
 #include <mach/omap4-common.h>
 #include <mach/dmm.h>
@@ -41,7 +41,7 @@
 #include <asm/mach/arch.h>
 #include <asm/mach/map.h>
 #include <video/omapdss.h>
-
+#include <linux/input/isl29177.h>
 #include <plat/board.h>
 #include <plat/common.h>
 #include <plat/usb.h>
@@ -367,17 +367,24 @@
 		I2C_BOARD_INFO("eeprom", 0x50),
 	},
 };
+/*
+static struct i2c_board_info i2c_devs_info[] = {
+        {
+            I2C_BOARD_INFO("isl29125", 0x44),
+        }
+};
+*/
+static struct isl29177_pdata isl29177_data = {
+                .gpio_irq = 39
 
-static struct i2c_board_info __initdata isl29125_info[] = {                     
+};
 
-    {                                                                           
-
-        I2C_BOARD_INFO("isl29125",ISL29125_I2C_ADDR),                                       
-
-    },                                                                          
-
+static struct i2c_board_info __initdata isl_device_ids[] = {
+                {
+                        I2C_BOARD_INFO("isl29177", 0x44),
+                        .platform_data = &isl29177_data,
+                },
 };
-
 static int __init omap4_panda_i2c_init(void)
 {
 	omap4_pmic_get_config(&omap4_panda_twldata, TWL_COMMON_PDATA_USB,
@@ -392,13 +399,16 @@
 			TWL_COMMON_REGULATOR_CLK32KG);
 	omap4_pmic_init("twl6030", &omap4_panda_twldata);
 	omap_register_i2c_bus(2, 400, NULL, 0);
+//	omap_register_i2c_bus(4, 400, i2c_devs_info, ARRAY_SIZE(i2c_devs_info));
+
 	/*
 	 * Bus 3 is attached to the DVI port where devices like the pico DLP
 	 * projector don't work reliably with 400kHz
 	 */
 	omap_register_i2c_bus(3, 100, panda_i2c_eeprom,
 					ARRAY_SIZE(panda_i2c_eeprom));
-	omap_register_i2c_bus(4, 400, isl29125_info, ARRAY_SIZE(isl29125_info));
+	omap_register_i2c_bus(4, 400, isl_device_ids, ARRAY_SIZE(isl_device_ids));
+//	omap_register_i2c_bus(4, 400, NULL, 0);
 	return 0;
 }
 
@@ -473,9 +483,12 @@
 	OMAP4_MUX(DPM_EMU17, OMAP_PIN_OUTPUT | OMAP_MUX_MODE5),
 	/* dispc2_data1 */
 	OMAP4_MUX(DPM_EMU18, OMAP_PIN_OUTPUT | OMAP_MUX_MODE5),
+	/*GPIO 39 */
+	OMAP4_MUX(GPMC_AD15, OMAP_PIN_INPUT_PULLUP | OMAP_MUX_MODE3),
 	/* dispc2_data0 */
 	OMAP4_MUX(DPM_EMU19, OMAP_PIN_OUTPUT | OMAP_MUX_MODE5),
 	{ .reg_offset = OMAP_MUX_TERMINATOR },
+
 };
 
 static struct omap_device_pad serial2_pads[] __initdata = {
Index: arch/arm/configs/android_omap4_defconfig
===================================================================
--- arch/arm/configs/android_omap4_defconfig	(revision 2)
+++ arch/arm/configs/android_omap4_defconfig	(working copy)
@@ -212,6 +212,7 @@
 CONFIG_INPUT_TWL6040_VIBRA=y
 CONFIG_INPUT_UINPUT=y
 CONFIG_INPUT_GPIO=y
+CONFIG_INPUT_ISL29177=y
 # CONFIG_SERIO_SERPORT is not set
 CONFIG_VT_HW_CONSOLE_BINDING=y
 # CONFIG_LEGACY_PTYS is not set
